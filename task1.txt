11.04.2022

Задание

1 часть.
Написать загрузчик, распологающийся в MBR.
Загрузчик должен просматривать таблицу разделов, выводить информацию о всех найденных первичных и логических разделах
(начало, размер, тип, признак активности) и ожидать от пользователя указания раздела, с которого грузиться.
Ожидать необходимо в течение определённого промежутка времени, по истечении которого грузить первый активный раздел.
Если пользователь выбирает раздел для загрузки, то необходимо внести изменения в таблицу разделов: пометить выбранный раздел как активный,
чтобы при следующей загрузке он грузился по умолчанию.
При загрузке с раздела следует считать его первый сектор по адресу 0x7c00, предварительно скопировав себя по другому адресу, и передать ему управление.
Должна быть поддержка CHS и LBA адресов.

2 часть.
Написать небольшое ядро и загрузчик ядра.
Они располагаются в отдельном разделе: загрузчик записывается в первый загрузочный сектор раздела (этот сектор считывает с диска загрузчик MBR).
Загрузчик считывает с диска и загружает ядро (каким-то образом должен определить его местоположение).
Ядро должно работать в защищённом режиме с виртуальной памятью.
Ядро производит инициализацию:
- перепрограммировать контроллер прерываний;
- перевести процессор в защищённый режим;
- настроить IDT, GDT, TSS;
- настроить таблицы страниц;
- включить механизм страничной трансляции;
- передать управление основному коду ядра, расположенному в старших 2 ГБ виртуального адресного пространства.

Виртуальное адресное пространство следует разделить на две части. Верхние 2 ГБ (с адреса 0x80000000) для кода и данных ядра.
Нижние 2 ГБ (0x000000 - 0x7FFFFFFF) для кода и данных пользовательских программ третьего кольца.
Верхние 2 ГБ должны быть защищены от доступа из третьего кольца.
Код ядра должен работать в нулевом кольце.
Должно быть не менее двух пользовательских процессов, исполняющихся в третьем кольце.
Для эмуляции полезной работы процессы должны выполнять две разные функциональности.
Один процесс должен бесконечно пробегать по статически заданному массиву указателей на строки и через шлюз по указателю выводить строку на
экран (строки должны выводиться в одном и том же месте экрана: например, в начале первой строки).
Другой процесс должен бесконечно выводить в порядке возрастания числа из статически заданного массива: сначала ищется и выводится минимальный,
затем следующий и т.д., после вывода всех элементов опять начинать с минимального.
Числа должны выводиться в одном и том же месте экрана: например, в начале второй строки.
Для вывода на экран процессы должны обращаться к ядру через шлюз, так как непосредственного доступа к видеопамяти
(которая должна быть отображена на верхние 2 ГБ) у них быть не должно.
По прерыванию таймера (с некоторой периодичностью, например раз в 10 тиков таймера) управление должно переключаться с одного процесса на другой.

3 часть.
Написать установщик.
Установщик должен быть реализован в виде загрузочного кода (аналогично загрузчику MBR или загрузчику раздела):
предполагается, что он прописывается в виде загрузочного кода на некоторый диск, с которого осуществляется загрузка,
и установка производится на некоторый другой диск.
Установщик должен найти доступные диски.
Предложить пользователю список дисков для установки (исключая диск с установщиком).
На выбранном диске найти и вывести список разделов, либо предложить разбить диск и создать новую таблицу разделов.
В выбранный пользователем раздел записать загрузчик раздела и ядро.


n - номер студента в списке (ориентироваться на список с оценками).
a=11
b=19


Базовая функциональность (к сдаче не принимаются задания с функциональностью меньше базовой).
25 баллов.
Требования:
1 часть
1) Загрузчик в MBR должен анализировать таблицу первичных разделов (можно игнорировать расширенные разделы), находить загрузочный раздел и загружать загрузчик из него.
2) Должна быть поддержка CHS и LBA адресации.

2 часть
1) Загрузчик ядра должен загружать основной код (ядро).
2) Ядро должно работать в защищённом режиме с виртуальной памятью (необходимо произвести соответствующую инициализацию).
3) Адресное пространство должно разделяться пополам между кодом третьего и нулевого кольца. Ядро должна находиться в верхних 2 ГБ виртуальной памяти.
4) Реализовать шлюз, через который код 3 кольца сможет обращаться к ядру для вывода символов (через видеобуфер, отображённый в память ядра).
5) Корректно обрабатывать прерывания (таймера, клавиатуры, шлюза системного вызова), не нарушая работоспособности прерванной программы. Введённые с клавиатуры символы последовательно отображать на экране.
6) Реализовать тестовый код третьего кольца с одной из двух вышеуказанных функциональностей.
7) Располагать пользовательский код последовательно для первой функциональности с адреса:
0x400000*(n*a+1) + 0x1000*(n*b+2)
Для второй - с адреса:
0x400000*(n*a+20) + 0x1000*(n*b+30)

3 часть
1) Реализовать запись загрузчика MBR, загрузчика раздела и ядра с помощью программы dd в файл образа диска эмулятора.



Дополнительные задания.
Выбрать не более трёх заданий. При этом из 1 и 3 частей суммарно должно быть не более одного задания.


1 часть
1) Анализировать расширенные разделы (предполагать возможность существования до 4-х расширенных разделов), допускать загрузку с логических разделов, запоминать выбор пользователя (изменяя признак активности выбранного раздела), ожидать выбор пользователя в течении определённого времени, по истечении которого загружать активный раздел.
До 10 баллов.

2 часть
1) Реализовать переключение между двумя процессами, реализующими две указанные функциональности (корректно сохранять и восстанавливать контекст, отслеживать кванты времени).
10 баллов (+20 баллов за поддержку произвольного количества процессов).
2) Реализовать управление виртуальной памятью (выделение/освобождение памяти, учет виртуальных страниц и страничных фреймов, обработка страничных исключений, подкачка страниц). Реализовать код, демонстрирующий реализованные возможности.
До 30 баллов.
3) Реализовать драйвер клавиатуры, который будет сохранять в буфере нажатые клавиши. Через шлюз реализовать возможность для программ получения нажатых клавиш (блокирующее ожидание и неблокирующие считывание доступной в буфере клавиши).
10 баллов.
4) Реализовать драйвер жесткого диска, позволяющий считывать и записывать секторы диска. Предоставлять для программ через шлюз интерфейс к функциям этого драйвера.
До 20 баллов.
5) Реализовать поддержку файловой системы (своей или существующей). Предоставлять для программ через шлюз интерфейс для работы с файловой системой.
До 30 баллов.

3 часть
1) Реализовать инсталлятор в виде загрузочного кода.
Инсталлятор любым способом устанавливается на некоторый диск (образ диска), с которого осуществляется загрузка.
Инсталлятор должен общаться с пользователем и устанавливать загрузчик раздела и ядро в указанный раздел указанного (некоторого другого) диска.
Дополнительно можно реализовать возможность разбиения указанного диска на разделы.
До 25 баллов.



Указания и рекомендации

1. Загрузочный раздел следует определять в таблице по выставленному флагу активности раздела или запрашивать у пользователя. Затем загрузчик должен загрузить в память первый сектор загрузочного раздела по адресу 0x7C00, предварительно переместив себя в другое место, и передать ему управление.

Загрузчик может не поместиться в 512 байт. Тогда необходимо разбить его на два модуля. Первый записывается в первый сектор и загружается BIOS в память по адресу 0x7C00. Второй модуль записывается в следующие сектора после MBR и должен быть загружен первым модулем.

Для тестирования можно использовать виртуальную машину в каталоге \\dc1\doc\Matkin\sysprog1\resource\vm\bochs\test. 
В образ диска необходимо записать свой загрузочный код, не повредив таблицы разделов. Соответственно, при записи загрузчика в MBR  нельзя записывать все 512 байт, чтобы не затереть таблицу разделов. Для этого при копировании в программе dd можно указать размер блока, равным 1 (по умолчанию равен 512), и количество блоков (512 - 64 - 2):
dd if=input.bin of=image.img bs=1 count=446

Для чтения секторов с диска использовать сервис BIOS прерывания int 0x13:
функции с номерами 2 и 3 для чтения и записи секторов по CHS адресам
функции с номерами 42 и 43 для чтения и записи секторов по LBA адресам


2. В GDT необходимо завести дескрипторы для сегментов кода и данных 3 кольца и кода и данных 0 кольца.
При выполнении в нулевом кольце в cs и ss должны быть дескрипторы сегментов нулевого кольца, в третьем кольце, соответственно, дескрипторы третьего кольца.
Для представления процессов следует завести структуру, в которой сохранять регистровый контекст прерванного процесса и содержимое регистра cr3. Для каждого процесса следует завести свой каталог страниц и таблицы страниц, описывающие нижние 2 ГБ. В каталогах страниц записи, описывающие верхние 2 ГБ должны совпадать, т.е. указывать на одни и те же таблицы страниц. Отличия могуть быть только в первых 512 записях для нижних 2 ГБ.
При переключении процесса необходимо сохранить состояние регистров текущего процесса в структуру процесса, восстановить регистры из структуры того процесса, который запускается на исполнение, и продолжить его исполнение с того места, на котором он был прерыван.

Примеры:

Ожидание нажатия клавиши в течении определённого промежутка времени:
lab\2\examples\2_timer

Чтение и запись секторов диска по CHS-адресам:
lab\2\examples\5_write_chs

Анализ таблицы разделов:
lab\2\examples\6_analysis_mbr

Чтение сектора по LBA адресу:
lab\2\examples\7_read_lba

Перевод процессора в защищённый режим:
lab\4\examples\1_pm_jwasm

Обработка исключений:
lab\5\examples\pm_except_ring0
lab\5\examples\pm_except_ring3

Инициализация механизма виртуальной памяти:
lab\6\examples\virt_mem_1

Работа с виртуальной памятью
lab\7\examples\virt_mem_2
lab\7\examples\virt_mem_ring3
lab\7\examples\virt_mem_ring3_except





Источники информации:
"IA-32 Intel Architecture Software Developer’s Manual"
help.dos
Interrupt List
Кулаков - "Программирование дисковых подсистем"
Кулаков - "Программирование на аппаратном уровне"
Гук, Юров - "Процессоры Pentium 4, Athlon и Duron"
Фроловы - "Защищенный режим процессоров Intel 80286,80386,80486"
Аблязов - "Программирование на ассемблере на платформе x86-64"
doc\mbr



Пример кода для определения параметров

a=11
b=19
for n in range(1,10):
	print 'student ' + str(n)
	print '\t' + hex(0x400000*(n*a+1) + 0x1000*(n*b+2))
	print '\t' + hex(0x400000*(n*a+20) + 0x1000*(n*b+30))
